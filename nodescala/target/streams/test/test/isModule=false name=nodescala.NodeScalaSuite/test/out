[0m[[0minfo[0m] [0m[32mNodeScalaSuite:[0m[0m
[0m[[0minfo[0m] [0m[32m- A Future should always be completed[0m[0m
[0m[[0minfo[0m] [0m[32m- A Future should never be completed[0m[0m
[0m[[0minfo[0m] [0m[31m- A Future holding the list of values of all the Futures from a List[Future[T]]. *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  java.util.concurrent.TimeoutException: Futures timed out after [3000000 nanoseconds][0m[0m
[0m[[0minfo[0m] [0m[31m  at scala.concurrent.impl.Promise$DefaultPromise.ready(Promise.scala:219)[0m[0m
[0m[[0minfo[0m] [0m[31m  at scala.concurrent.impl.Promise$DefaultPromise.result(Promise.scala:223)[0m[0m
[0m[[0minfo[0m] [0m[31m  at scala.concurrent.Await$$anonfun$result$1.apply(package.scala:116)[0m[0m
[0m[[0minfo[0m] [0m[31m  at scala.concurrent.BlockContext$DefaultBlockContext$.blockOn(BlockContext.scala:53)[0m[0m
[0m[[0minfo[0m] [0m[31m  at scala.concurrent.Await$.result(package.scala:116)[0m[0m
[0m[[0minfo[0m] [0m[31m  at nodescala.NodeScalaSuite$$anonfun$3.apply$mcV$sp(tests.scala:37)[0m[0m
[0m[[0minfo[0m] [0m[31m  at nodescala.NodeScalaSuite$$anonfun$3.apply(tests.scala:35)[0m[0m
[0m[[0minfo[0m] [0m[31m  at nodescala.NodeScalaSuite$$anonfun$3.apply(tests.scala:35)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)[0m[0m
[0m[[0minfo[0m] [0m[31m  ...[0m[0m
[0m[[0minfo[0m] [0m[32m- A race beween Futures should return the quickest Future[T][0m[0m
[0m[[0minfo[0m] [0m[32m- Future.delay have to finish when Await will wait[0m[0m
[0m[[0minfo[0m] [0m[32m- Future.delay can't to finish when Await won't wait[0m[0m
[0m[[0minfo[0m] [0m[32m- Calling 'now' on instances of Future could return the Future's value..[0m[0m
[0m[[0minfo[0m] [0m[32m- continueWith should wait for the first future to complete[0m[0m
[0m[[0minfo[0m] [0m[32m- continue should wait for the first future to complete[0m[0m
[0m[[0minfo[0m] [0m[32m- CancellationTokenSource should allow stopping the computation[0m[0m
[0m[[0minfo[0m] [0m[32m- Server should be stoppable if receives infinite  response[0m[0m
[0m[[0minfo[0m] [0m[32m- Server should serve requests[0m[0m
